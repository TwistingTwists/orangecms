defmodule OrangeCms.Repo.Migrations.AddGithubSetting do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    alter table(:projects) do
      add :github_config, :map
    end

    alter table(:content_types) do
      add :github_config, :map
    end

    create index(:content_types, ["id", "project_id"], unique: true)

    drop constraint(:content_entries, "content_entries_project_id_fkey")

    drop constraint(:content_entries, "content_entries_content_type_id_fkey")

    alter table(:content_entries) do
      modify :content_type_id,
             references(:content_types,
               column: :id,
               with: [project_id: :project_id],
               match: :full,
               name: "content_entries_content_type_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all,
               on_update: :update_all
             )
    end

    alter table(:content_entries) do
      modify :project_id,
             references(:projects,
               column: :id,
               prefix: "public",
               name: "content_entries_project_id_fkey",
               type: :text
             )
    end
  end

  def down do
    drop constraint(:content_entries, "content_entries_project_id_fkey")

    alter table(:content_entries) do
      modify :project_id,
             references(:projects,
               column: :id,
               prefix: "public",
               name: "content_entries_project_id_fkey",
               type: :text,
               on_delete: :delete_all,
               on_update: :update_all
             )
    end

    drop constraint(:content_entries, "content_entries_content_type_id_fkey")

    alter table(:content_entries) do
      modify :content_type_id,
             references(:content_types,
               column: :id,
               prefix: "public",
               name: "content_entries_content_type_id_fkey",
               type: :uuid,
               on_delete: :delete_all,
               on_update: :update_all
             )
    end

    drop_if_exists index(:content_types, ["project_id", "id", "project_id"],
                     name: "content_types_id_project_id_index"
                   )

    alter table(:content_types) do
      remove :github_config
    end

    alter table(:projects) do
      remove :github_config
    end
  end
end
