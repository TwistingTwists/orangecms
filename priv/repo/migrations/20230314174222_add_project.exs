defmodule OrangeCms.Repo.Migrations.AddProject do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:projects, primary_key: false) do
      add :id, :text, null: false, primary_key: true
      add :name, :text, null: false
      add :image, :text
      add :type, :text, default: "headless_cms"
      add :inserted_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")
    end

    create table(:content_types, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :name, :text, null: false
      add :key, :text, null: false
      add :image_settings, :map
      add :field_defs, {:array, :map}
      add :anchor_field, :text
      add :inserted_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")

      add :project_id,
          references(:projects,
            column: :id,
            name: "content_types_project_id_fkey",
            type: :text,
            prefix: "public",
            on_delete: :delete_all,
            on_update: :update_all
          ),
          null: false
    end

    create table(:content_entries, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :title, :text, null: false
      add :raw_body, :text, null: false, default: ""
      add :json_body, :map
      add :frontmatter, :map
      add :inserted_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")

      add :content_type_id,
          references(:content_types,
            column: :id,
            name: "content_entries_content_type_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all,
            on_update: :update_all
          ),
          null: false

      add :project_id,
          references(:projects,
            column: :id,
            name: "content_entries_project_id_fkey",
            type: :text,
            prefix: "public",
            on_delete: :delete_all,
            on_update: :update_all
          ),
          null: false
    end
  end

  def down do
    drop constraint(:content_entries, "content_entries_project_id_fkey")

    drop constraint(:content_entries, "content_entries_content_type_id_fkey")

    drop table(:content_entries)

    drop constraint(:content_types, "content_types_project_id_fkey")

    drop table(:content_types)

    drop table(:projects)
  end
end
